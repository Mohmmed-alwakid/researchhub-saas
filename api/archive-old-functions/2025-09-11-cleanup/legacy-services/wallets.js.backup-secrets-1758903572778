import { createClient } from '@supabase/supabase-js';


/**
 * WALLET MANAGEMENT API
 * Handles: User wallets, transactions, and withdrawals
 */

// Supabase configuration
const supabaseUrl = process.env.SUPABASE_URL || 'https://wxpwxzdgdvinlbtnbgdf.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind4cHd4emRnZHZpbmxidG5iZ2RmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxOTk1ODAsImV4cCI6MjA2NTc3NTU4MH0.YMai9p4VQMbdqmc_9uWGeJ6nONHwuM9XT2FDTFy0aGk';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind4cHd4emRnZHZpbmxidG5iZ2RmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDE5OTU4MCwiZXhwIjoyMDY1Nzc1NTgwfQ.I_4j2vgcu2aR9Pw1d-QG2hpKunbmNKD8tWg3Psl0GNc';

// Initialize Supabase clients
const supabase = createClient(supabaseUrl, supabaseKey);
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);

console.log('üí∞ Wallet API initialized');

/**
 * Helper function to authenticate user
 */
async function authenticateUser(req) {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return { success: false, error: 'Missing or invalid authorization header', status: 401 };
    }

    const token = authHeader.replace('Bearer ', '');
    
    // Verify token with Supabase
    const { data: { user }, error } = await supabase.auth.getUser(token);

    if (error || !user) {
      console.log('‚ùå Token verification failed:', error?.message);
      return { success: false, error: 'Invalid or expired token', status: 401 };
    }

    return {
      success: true,
      user: {
        id: user.id,
        email: user.email
      }
    };

  } catch (error) {
    console.error('Authentication error:', error);
    return { success: false, error: 'Authentication service error', status: 500 };
  }
}

/**
 * Main API handler
 */
export default async function handler(req, res) {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  try {
    const { action } = req.query;

    switch (action) {
      case 'wallet':
        return await getWallet(req, res);
      
      case 'transactions':
        return await getTransactions(req, res);
      
      case 'withdrawals':
        return await getWithdrawals(req, res);
      
      case 'create-withdrawal':
        return await createWithdrawal(req, res);
      
      default:
        return res.status(400).json({ 
          success: false, 
          error: 'Invalid action parameter' 
        });
    }

  } catch (error) {
    console.error('Wallet API error:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'Internal server error' 
    });
  }
}

/**
 * Get user wallet information
 */
async function getWallet(req, res) {
  const auth = await authenticateUser(req);
  if (!auth.success) {
    return res.status(auth.status).json(auth);
  }

  try {
    // For now, return a default wallet structure
    // In the future, this would fetch from a wallets table
    const wallet = {
      id: auth.user.id,
      user_id: auth.user.id,
      balance: 0.00,
      currency: 'USD',
      total_earned: 0.00,
      total_withdrawn: 0.00,
      pending_earnings: 0.00,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    return res.status(200).json({ 
      success: true, 
      data: wallet 
    });

  } catch (error) {
    console.error('Get wallet error:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'Failed to fetch wallet' 
    });
  }
}

/**
 * Get user transactions
 */
async function getTransactions(req, res) {
  const auth = await authenticateUser(req);
  if (!auth.success) {
    return res.status(auth.status).json(auth);
  }

  try {
    // For now, return empty transactions
    // In the future, this would fetch from a transactions table
    const transactions = [];

    return res.status(200).json({ 
      success: true, 
      data: transactions 
    });

  } catch (error) {
    console.error('Get transactions error:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'Failed to fetch transactions' 
    });
  }
}

/**
 * Get user withdrawals
 */
async function getWithdrawals(req, res) {
  const auth = await authenticateUser(req);
  if (!auth.success) {
    return res.status(auth.status).json(auth);
  }

  try {
    // For now, return empty withdrawals
    // In the future, this would fetch from a withdrawals table
    const withdrawals = [];

    return res.status(200).json({ 
      success: true, 
      data: withdrawals 
    });

  } catch (error) {
    console.error('Get withdrawals error:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'Failed to fetch withdrawals' 
    });
  }
}

/**
 * Create a withdrawal request
 */
async function createWithdrawal(req, res) {
  const auth = await authenticateUser(req);
  if (!auth.success) {
    return res.status(auth.status).json(auth);
  }

  try {
    const { amount, method } = req.body;

    if (!amount || amount <= 0) {
      return res.status(400).json({ 
        success: false, 
        error: 'Valid amount is required' 
      });
    }

    // For now, return a placeholder response
    // In the future, this would create an actual withdrawal request
    const withdrawal = {
      id: `withdrawal_${Date.now()}`,
      user_id: auth.user.id,
      amount: amount,
      method: method || 'bank_transfer',
      status: 'pending',
      created_at: new Date().toISOString()
    };

    return res.status(201).json({ 
      success: true, 
      data: withdrawal,
      message: 'Withdrawal request created successfully'
    });

  } catch (error) {
    console.error('Create withdrawal error:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'Failed to create withdrawal request' 
    });
  }
}
