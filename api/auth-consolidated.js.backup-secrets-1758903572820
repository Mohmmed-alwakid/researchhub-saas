import { createClient } from '@supabase/supabase-js';


/**
 * UNIFIED AUTHENTICATION & PASSWORD MANAGEMENT API
 * Handles: Authentication (login/register/refresh/verify/status/logout) + Password Management (forgot/reset/change)
 * Consolidated from auth-consolidated.js + password.js to save Vercel function slots
 */

// Supabase configuration
const supabaseUrl = process.env.SUPABASE_URL || 'https://wxpwxzdgdvinlbtnbgdf.supabase.co';
const supabaseKey = process.env.SUPABASE_ANON_KEY || 'process.env.SUPABASE_SERVICE_ROLE_KEY || 'your_supabase_service_role_key_here'';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind4cHd4emRnZHZpbmxidG5iZ2RmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDE5OTU4MCwiZXhwIjoyMDY1Nzc1NTgwfQ.I_4j2vgcu2aR9Pw1d-QG2hpKunbmNKD8tWg3Psl0GNc';

// Initialize Supabase clients
const supabase = createClient(supabaseUrl, supabaseKey);
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);

console.log('üîë Production Authentication API initialized with Supabase');

/**
 * Main API handler
 */
export default async function handler(req, res) {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  const { action } = req.query;

  try {
    switch (action) {
      case 'login':
        return await handleLogin(req, res);
      case 'register':
        return await handleRegister(req, res);
      case 'refresh':
        return await handleRefresh(req, res);
      case 'verify':
        return await handleVerify(req, res);
      case 'status':
        return await handleStatus(req, res);
      case 'logout':
        return await handleLogout(req, res);
      case 'forgot':
        return await forgotPassword(req, res);
      case 'reset':
        return await resetPassword(req, res);
      case 'change':
        return await changePassword(req, res);
      default:
        return res.status(400).json({
          success: false,
          error: 'Invalid action. Supported: login, register, refresh, verify, status, logout, forgot, reset, change'
        });
    }
  } catch (error) {
    console.error('Auth API error:', error);
    return res.status(500).json({
      success: false,
      error: 'Authentication service error'
    });
  }
}

/**
 * Handle login
 */
async function handleLogin(req, res) {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        success: false,
        error: 'Email and password are required'
      });
    }

    console.log(`üîë Login attempt for: ${email}`);

    // Authenticate with Supabase
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email,
      password
    });

    if (authError) {
      console.log('‚ùå Authentication failed:', authError.message);
      return res.status(401).json({
        success: false,
        error: authError.message
      });
    }

    if (authData?.user) {
      console.log('‚úÖ Authentication successful');
      
      // Get user profile
      const { data: profile } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', authData.user.id)
        .single();

      const userResponse = {
        id: authData.user.id,
        email: authData.user.email,
        firstName: profile?.first_name || authData.user.user_metadata?.first_name || '',
        lastName: profile?.last_name || authData.user.user_metadata?.last_name || '',
        role: profile?.role || authData.user.user_metadata?.role || 'participant',
        status: profile?.status || 'active',
        emailConfirmed: authData.user.email_confirmed_at ? true : false
      };

      return res.status(200).json({
        success: true,
        user: userResponse,
        session: {
          access_token: authData.session.access_token,
          refresh_token: authData.session.refresh_token
        }
      });
    }

    return res.status(401).json({
      success: false,
      error: 'Invalid credentials'
    });

  } catch (error) {
    console.error('Login error:', error);
    return res.status(500).json({
      success: false,
      error: 'Authentication service error'
    });
  }
}

/**
 * Handle registration
 */
async function handleRegister(req, res) {
  try {
    const { email, password, firstName, lastName, role = 'participant' } = req.body;

    if (!email || !password) {
      return res.status(400).json({
        success: false,
        error: 'Email and password are required'
      });
    }

    console.log(`üë§ Registration attempt for: ${email}`);

    // Register with Supabase
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          first_name: firstName,
          last_name: lastName,
          role: role
        }
      }
    });

    if (authError) {
      console.log('‚ùå Registration failed:', authError.message);
      return res.status(400).json({
        success: false,
        error: authError.message
      });
    }

    if (authData?.user) {
      console.log('‚úÖ Registration successful');

      return res.status(200).json({
        success: true,
        user: {
          id: authData.user.id,
          email: authData.user.email,
          firstName: firstName || '',
          lastName: lastName || '',
          role: role,
          emailConfirmed: false
        },
        message: 'Registration successful. Please check your email for verification.'
      });
    }

    return res.status(400).json({
      success: false,
      error: 'Registration failed'
    });

  } catch (error) {
    console.error('Registration error:', error);
    return res.status(500).json({
      success: false,
      error: 'Registration service error'
    });
  }
}

/**
 * Handle token refresh
 */
async function handleRefresh(req, res) {
  try {
    const { refresh_token } = req.body;

    if (!refresh_token) {
      return res.status(400).json({
        success: false,
        error: 'Refresh token is required'
      });
    }

    const { data: authData, error: authError } = await supabase.auth.refreshSession({
      refresh_token
    });

    if (authError) {
      return res.status(401).json({
        success: false,
        error: authError.message
      });
    }

    return res.status(200).json({
      success: true,
      session: {
        access_token: authData.session.access_token,
        refresh_token: authData.session.refresh_token
      }
    });

  } catch (error) {
    console.error('Refresh error:', error);
    return res.status(500).json({
      success: false,
      error: 'Token refresh failed'
    });
  }
}

/**
 * Handle email verification
 */
async function handleVerify(req, res) {
  try {
    const { token, type } = req.query;

    if (!token) {
      return res.status(400).json({
        success: false,
        error: 'Verification token is required'
      });
    }

    const { data, error } = await supabase.auth.verifyOtp({
      token_hash: token,
      type: type || 'signup'
    });

    if (error) {
      return res.status(400).json({
        success: false,
        error: error.message
      });
    }

    return res.status(200).json({
      success: true,
      message: 'Email verified successfully'
    });

  } catch (error) {
    console.error('Verification error:', error);
    return res.status(500).json({
      success: false,
      error: 'Email verification failed'
    });
  }
}

/**
 * Handle auth status check
 */
async function handleStatus(req, res) {
  try {
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({
        success: false,
        error: 'No valid authorization token'
      });
    }

    const token = authHeader.substring(7);
    
    const { data: { user }, error } = await supabase.auth.getUser(token);

    if (error || !user) {
      return res.status(401).json({
        success: false,
        error: 'Invalid or expired token'
      });
    }

    // Get user profile
    const { data: profile } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single();

    return res.status(200).json({
      success: true,
      user: {
        id: user.id,
        email: user.email,
        firstName: profile?.first_name || user.user_metadata?.first_name || '',
        lastName: profile?.last_name || user.user_metadata?.last_name || '',
        role: profile?.role || user.user_metadata?.role || 'participant',
        status: profile?.status || 'active',
        emailConfirmed: user.email_confirmed_at ? true : false
      }
    });

  } catch (error) {
    console.error('Status check error:', error);
    return res.status(500).json({
      success: false,
      error: 'Status check failed'
    });
  }
}

/**
 * Handle logout
 */
async function handleLogout(req, res) {
  try {
    const authHeader = req.headers.authorization;
    
    if (authHeader && authHeader.startsWith('Bearer ')) {
      const token = authHeader.substring(7);
      await supabase.auth.admin.signOut(token);
    }

    return res.status(200).json({
      success: true,
      message: 'Logged out successfully'
    });

  } catch (error) {
    console.error('Logout error:', error);
    return res.status(200).json({
      success: true,
      message: 'Logged out (with errors)'
    });
  }
}

/**
 * Send password reset email
 */
async function forgotPassword(req, res) {
  try {
    const { email } = req.body;

    if (!email) {
      return res.status(400).json({ 
        success: false, 
        error: 'Email is required' 
      });
    }

    console.log('üîÑ Requesting password reset for:', email);

    // Send password reset email via Supabase
    const { data, error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${process.env.SUPABASE_SITE_URL || 'https://researchhub-saas-o3niec8rf-mohmmed-alwakids-projects.vercel.app'}/reset-password`
    });

    if (error) {
      console.error('‚ùå Password reset error:', error);
      return res.status(400).json({ 
        success: false, 
        error: 'Failed to send password reset email. Please check the email address.' 
      });
    }

    console.log('‚úÖ Password reset email sent successfully');

    return res.status(200).json({ 
      success: true, 
      message: 'Password reset email sent successfully. Please check your inbox.' 
    });

  } catch (error) {
    console.error('Forgot password error:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'Failed to process password reset request' 
    });
  }
}

/**
 * Reset password with token
 */
async function resetPassword(req, res) {
  try {
    const { token, password } = req.body;

    if (!token || !password) {
      return res.status(400).json({ 
        success: false, 
        error: 'Token and new password are required' 
      });
    }

    console.log('üîÑ Resetting password with token');

    // Update password using the reset token
    const { data, error } = await supabase.auth.updateUser({
      password: password
    });

    if (error) {
      console.error('‚ùå Password reset error:', error);
      return res.status(400).json({ 
        success: false, 
        error: 'Failed to reset password. Invalid or expired token.' 
      });
    }

    console.log('‚úÖ Password reset successfully');

    return res.status(200).json({ 
      success: true, 
      message: 'Password reset successfully' 
    });

  } catch (error) {
    console.error('Reset password error:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'Failed to reset password' 
    });
  }
}

/**
 * Change password for authenticated user
 */
async function changePassword(req, res) {
  try {
    const { currentPassword, newPassword } = req.body;
    const authHeader = req.headers.authorization;

    if (!currentPassword || !newPassword) {
      return res.status(400).json({ 
        success: false, 
        error: 'Current password and new password are required' 
      });
    }

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ 
        success: false, 
        error: 'Authentication required' 
      });
    }

    const token = authHeader.replace('Bearer ', '');

    // Verify current user
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);

    if (userError || !user) {
      return res.status(401).json({ 
        success: false, 
        error: 'Invalid authentication token' 
      });
    }

    console.log('üîÑ Changing password for user:', user.email);

    // Update password
    const { data, error } = await supabase.auth.updateUser({
      password: newPassword
    });

    if (error) {
      console.error('‚ùå Password change error:', error);
      return res.status(400).json({ 
        success: false, 
        error: 'Failed to change password' 
      });
    }

    console.log('‚úÖ Password changed successfully');

    return res.status(200).json({ 
      success: true, 
      message: 'Password changed successfully' 
    });

  } catch (error) {
    console.error('Change password error:', error);
    return res.status(500).json({ 
      success: false, 
      error: 'Failed to change password' 
    });
  }
}
