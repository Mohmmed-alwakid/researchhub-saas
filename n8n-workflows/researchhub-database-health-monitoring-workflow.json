{
  "name": "ResearchHub Database Health Monitoring Workflow",
  "meta": {
    "instanceId": "researchhub-database-health"
  },
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "interval": 6
            }
          ]
        }
      },
      "id": "schedule-trigger-db",
      "name": "Every 6 Hours DB Health Check",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [200, 300]
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "executeQuery",
        "query": "-- Connection test\nSELECT \n  1 as connection_test,\n  NOW() as db_timestamp,\n  version() as postgres_version,\n  current_setting('server_version') as server_version;"
      },
      "id": "test-database-connection",
      "name": "Test Database Connection",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [400, 200],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "executeQuery",
        "query": "-- Core tables health check\nSELECT \n  schemaname,\n  tablename,\n  tableowner,\n  hasindexes,\n  hasrules,\n  hastriggers\nFROM pg_tables \nWHERE schemaname = 'public' \n  AND tablename IN ('studies', 'users', 'study_sessions', 'study_applications', 'templates')\nORDER BY tablename;"
      },
      "id": "check-core-tables",
      "name": "Check Core Tables Structure",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [400, 300],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "executeQuery",
        "query": "-- Performance and statistics\nSELECT \n  t.schemaname,\n  t.tablename,\n  pg_size_pretty(pg_total_relation_size(c.oid)) as total_size,\n  pg_size_pretty(pg_relation_size(c.oid)) as table_size,\n  c.reltuples::bigint as estimated_row_count,\n  pg_stat_get_numscans(c.oid) as seq_scans,\n  pg_stat_get_tuples_returned(c.oid) as tuples_read\nFROM pg_tables t\nJOIN pg_class c ON c.relname = t.tablename\nWHERE t.schemaname = 'public' \n  AND t.tablename IN ('studies', 'users', 'study_sessions', 'study_applications')\nORDER BY pg_total_relation_size(c.oid) DESC;"
      },
      "id": "check-database-performance",
      "name": "Check Database Performance Stats",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [400, 400],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "executeQuery",
        "query": "-- Data integrity checks\nSELECT \n  'studies' as table_name,\n  COUNT(*) as total_records,\n  COUNT(*) FILTER (WHERE created_at IS NULL) as missing_created_at,\n  COUNT(*) FILTER (WHERE title IS NULL OR title = '') as missing_title,\n  COUNT(*) FILTER (WHERE status NOT IN ('draft', 'active', 'paused', 'completed')) as invalid_status\nFROM studies\n\nUNION ALL\n\nSELECT \n  'users' as table_name,\n  COUNT(*) as total_records,\n  COUNT(*) FILTER (WHERE created_at IS NULL) as missing_created_at,\n  COUNT(*) FILTER (WHERE email IS NULL OR email = '') as missing_email,\n  COUNT(*) FILTER (WHERE role NOT IN ('researcher', 'participant', 'admin')) as invalid_role\nFROM auth.users\n\nUNION ALL\n\nSELECT \n  'study_sessions' as table_name,\n  COUNT(*) as total_records,\n  COUNT(*) FILTER (WHERE created_at IS NULL) as missing_created_at,\n  COUNT(*) FILTER (WHERE study_id IS NULL) as missing_study_id,\n  COUNT(*) FILTER (WHERE participant_id IS NULL) as missing_participant_id\nFROM study_sessions;"
      },
      "id": "check-data-integrity",
      "name": "Check Data Integrity",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [400, 500],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "database",
        "operation": "executeQuery",
        "query": "-- RLS policy verification\nSELECT \n  schemaname,\n  tablename,\n  policyname,\n  permissive,\n  roles,\n  cmd,\n  qual\nFROM pg_policies \nWHERE schemaname = 'public' \n  AND tablename IN ('studies', 'study_sessions', 'study_applications')\nORDER BY tablename, policyname;"
      },
      "id": "check-rls-policies",
      "name": "Check RLS Policies",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [400, 600],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://researchhub-saas.vercel.app/api/health",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "n8n-ResearchHub-DBValidator/1.0"
            }
          ]
        },
        "options": {
          "timeout": 10000,
          "retry": {
            "enabled": true,
            "maxTries": 2
          }
        }
      },
      "id": "test-health-api",
      "name": "Test Health API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [600, 200],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://researchhub-saas.vercel.app/api/research-consolidated",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "action",
              "value": "get-studies"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "n8n-ResearchHub-DBValidator/1.0"
            },
            {
              "name": "Authorization",
              "value": "Bearer test-health-check-token"
            }
          ]
        },
        "options": {
          "timeout": 15000,
          "retry": {
            "enabled": true,
            "maxTries": 2
          }
        }
      },
      "id": "test-database-api",
      "name": "Test Database-Dependent API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [600, 300],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Aggregate database health monitoring results\nconst connectionTest = $node['Test Database Connection'].json;\nconst coreTables = $node['Check Core Tables Structure'].json;\nconst performanceStats = $node['Check Database Performance Stats'].json;\nconst dataIntegrity = $node['Check Data Integrity'].json;\nconst rlsPolicies = $node['Check RLS Policies'].json;\nconst healthAPI = $node['Test Health API'].json;\nconst databaseAPI = $node['Test Database-Dependent API'].json;\n\nconst results = {\n  timestamp: new Date().toISOString(),\n  databaseConnection: {\n    status: connectionTest?.connection_test === 1 ? 'HEALTHY' : 'FAILED',\n    postgresVersion: connectionTest?.postgres_version || 'N/A',\n    dbTimestamp: connectionTest?.db_timestamp || 'N/A'\n  },\n  coreTablesHealth: {\n    status: Array.isArray(coreTables) && coreTables.length >= 5 ? 'HEALTHY' : 'MISSING_TABLES',\n    tablesFound: Array.isArray(coreTables) ? coreTables.length : 0,\n    expectedTables: 5,\n    details: Array.isArray(coreTables) ? coreTables.map(t => t.tablename).join(', ') : 'N/A'\n  },\n  performanceStats: {\n    status: Array.isArray(performanceStats) && performanceStats.length > 0 ? 'AVAILABLE' : 'NO_STATS',\n    largestTable: Array.isArray(performanceStats) && performanceStats.length > 0 ? \n      performanceStats[0]?.tablename + ' (' + performanceStats[0]?.total_size + ')' : 'N/A',\n    totalTables: Array.isArray(performanceStats) ? performanceStats.length : 0\n  },\n  dataIntegrityCheck: {\n    status: 'ANALYZED',\n    issues: [],\n    summary: Array.isArray(dataIntegrity) ? dataIntegrity.map(row => \n      `${row.table_name}: ${row.total_records} records`\n    ).join(', ') : 'N/A'\n  },\n  rlsPolicies: {\n    status: Array.isArray(rlsPolicies) && rlsPolicies.length > 0 ? 'ACTIVE' : 'NO_POLICIES',\n    policyCount: Array.isArray(rlsPolicies) ? rlsPolicies.length : 0,\n    tables: Array.isArray(rlsPolicies) ? \n      [...new Set(rlsPolicies.map(p => p.tablename))].join(', ') : 'N/A'\n  },\n  apiConnectivity: {\n    healthAPI: healthAPI?.statusCode === 200 ? 'HEALTHY' : 'FAILED',\n    databaseAPI: databaseAPI?.statusCode === 200 ? 'HEALTHY' : 'FAILED',\n    healthAPICode: healthAPI?.statusCode || 'ERROR',\n    databaseAPICode: databaseAPI?.statusCode || 'ERROR'\n  }\n};\n\n// Check for data integrity issues\nif (Array.isArray(dataIntegrity)) {\n  dataIntegrity.forEach(row => {\n    if (row.missing_created_at > 0) {\n      results.dataIntegrityCheck.issues.push(`${row.table_name}: ${row.missing_created_at} missing created_at`);\n    }\n    if (row.missing_title > 0) {\n      results.dataIntegrityCheck.issues.push(`${row.table_name}: ${row.missing_title} missing titles`);\n    }\n    if (row.missing_email > 0) {\n      results.dataIntegrityCheck.issues.push(`${row.table_name}: ${row.missing_email} missing emails`);\n    }\n    if (row.invalid_status > 0) {\n      results.dataIntegrityCheck.issues.push(`${row.table_name}: ${row.invalid_status} invalid statuses`);\n    }\n    if (row.invalid_role > 0) {\n      results.dataIntegrityCheck.issues.push(`${row.table_name}: ${row.invalid_role} invalid roles`);\n    }\n  });\n}\n\nresults.dataIntegrityCheck.status = results.dataIntegrityCheck.issues.length === 0 ? 'CLEAN' : 'ISSUES_FOUND';\n\n// Calculate overall database health\nconst criticalIssues = [\n  results.databaseConnection.status !== 'HEALTHY',\n  results.coreTablesHealth.status !== 'HEALTHY',\n  results.apiConnectivity.healthAPI !== 'HEALTHY',\n  results.dataIntegrityCheck.status === 'ISSUES_FOUND'\n];\n\nresults.overallHealth = criticalIssues.some(issue => issue) ? 'DEGRADED' : 'HEALTHY';\nresults.criticalIssueCount = criticalIssues.filter(issue => issue).length;\n\nreturn results;"
      },
      "id": "aggregate-db-health",
      "name": "Aggregate DB Health Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 350]
    },
    {
      "parameters": {
        "conditions": {
          "conditions": [
            {
              "id": "condition-1",
              "leftValue": "={{ $json.overallHealth }}",
              "rightValue": "HEALTHY",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "id": "route-db-health-results",
      "name": "Route DB Health Results",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1000, 350]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "post",
        "select": "channel",
        "channel": "#researchhub-monitoring",
        "text": "✅ **ResearchHub Database: ALL SYSTEMS HEALTHY**",
        "attachments": [
          {
            "color": "#36a64f",
            "title": "={{ 'Database Health Check - ' + $json.timestamp }}",
            "fields": {
              "item": [
                {
                  "title": "Database Connection",
                  "value": "={{ $json.databaseConnection.status }}",
                  "short": true
                },
                {
                  "title": "Core Tables",
                  "value": "={{ $json.coreTablesHealth.tablesFound + '/' + $json.coreTablesHealth.expectedTables + ' Found' }}",
                  "short": true
                },
                {
                  "title": "Data Integrity",
                  "value": "={{ $json.dataIntegrityCheck.status }}",
                  "short": true
                },
                {
                  "title": "RLS Policies",
                  "value": "={{ $json.rlsPolicies.policyCount + ' Active' }}",
                  "short": true
                },
                {
                  "title": "API Connectivity",
                  "value": "={{ $json.apiConnectivity.healthAPI + '/' + $json.apiConnectivity.databaseAPI }}",
                  "short": true
                },
                {
                  "title": "Performance Stats",
                  "value": "={{ $json.performanceStats.status }}",
                  "short": true
                }
              ]
            },
            "footer": "ResearchHub DB Monitor",
            "footer_icon": "https://researchhub-saas.vercel.app/favicon.ico"
          }
        ]
      },
      "id": "db-health-success",
      "name": "DB Health Success",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [1200, 200],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "post",
        "select": "channel",
        "channel": "#researchhub-alerts",
        "text": "🚨 **ResearchHub Database: HEALTH ISSUES DETECTED**",
        "attachments": [
          {
            "color": "#ff0000",
            "title": "={{ 'Database Health Alert - ' + $json.timestamp }}",
            "text": "={{ $json.criticalIssueCount + ' critical database issue(s) detected. Immediate attention required.' }}",
            "fields": {
              "item": [
                {
                  "title": "Database Connection",
                  "value": "={{ $json.databaseConnection.status }}",
                  "short": true
                },
                {
                  "title": "Core Tables",
                  "value": "={{ $json.coreTablesHealth.status }}",
                  "short": true
                },
                {
                  "title": "Data Integrity Issues",
                  "value": "={{ $json.dataIntegrityCheck.issues.length + ' Found' }}",
                  "short": true
                },
                {
                  "title": "RLS Policies",
                  "value": "={{ $json.rlsPolicies.status }}",
                  "short": true
                },
                {
                  "title": "Health API",
                  "value": "={{ $json.apiConnectivity.healthAPI + ' (' + $json.apiConnectivity.healthAPICode + ')' }}",
                  "short": true
                },
                {
                  "title": "Database API",
                  "value": "={{ $json.apiConnectivity.databaseAPI + ' (' + $json.apiConnectivity.databaseAPICode + ')' }}",
                  "short": true
                }
              ]
            },
            "footer": "ResearchHub DB Monitor - CRITICAL",
            "footer_icon": "https://researchhub-saas.vercel.app/favicon.ico"
          }
        ]
      },
      "id": "db-health-alert",
      "name": "DB Health Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [1200, 500],
      "onError": "continueRegularOutput"
    }
  ],
  "connections": {
    "Every 6 Hours DB Health Check": {
      "main": [
        [
          {
            "node": "Test Database Connection",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Core Tables Structure",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Database Performance Stats",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Data Integrity",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check RLS Policies",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test Health API",
            "type": "main",
            "index": 0
          },
          {
            "node": "Test Database-Dependent API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Database Connection": {
      "main": [
        [
          {
            "node": "Aggregate DB Health Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Core Tables Structure": {
      "main": [
        [
          {
            "node": "Aggregate DB Health Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Database Performance Stats": {
      "main": [
        [
          {
            "node": "Aggregate DB Health Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Data Integrity": {
      "main": [
        [
          {
            "node": "Aggregate DB Health Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check RLS Policies": {
      "main": [
        [
          {
            "node": "Aggregate DB Health Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Health API": {
      "main": [
        [
          {
            "node": "Aggregate DB Health Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Database-Dependent API": {
      "main": [
        [
          {
            "node": "Aggregate DB Health Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate DB Health Results": {
      "main": [
        [
          {
            "node": "Route DB Health Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route DB Health Results": {
      "main": [
        [
          {
            "node": "DB Health Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DB Health Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "timezone": "UTC",
    "saveExecutionProgress": true,
    "saveManualExecutions": true
  },
  "tags": [
    {
      "id": "researchhub",
      "name": "ResearchHub"
    },
    {
      "id": "database-monitoring",
      "name": "Database Monitoring"
    },
    {
      "id": "production",
      "name": "Production"
    }
  ]
}
